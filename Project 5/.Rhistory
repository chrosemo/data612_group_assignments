library(sparklyr)
install.packages('sparklyr')
library(readxl)
jester <- data.frame(read_xls("jester-data-1.xls", col_names = FALSE))
colnames(jester) <- c("ratingCount", seq(100))
row.names(jester) <- 1:nrow(jester)
# Remove num jokes column
ratings <- jester[-1]
# Replace 99 (no rating) with NA
ratings[ratings == 99] <- NA
# Subset to first 5000 users
ratings <- ratings[1:5000,]
# Create user- and item-specific rating counts
jokeCount <- rowSums(!is.na(ratings))
userCount <- colSums(!is.na(ratings))
# Function to replace NA with column medians
medValue.f <- function(x){
x[is.na(x)] = median(x, na.rm=TRUE)
return(x)
}
ratings_impute <- apply(ratings, 2, medValue.f)
# Create large dgCMatrix
ratings_matrix <- as.matrix(ratings_impute)
recclab_ratings <- as(ratings_matrix, 'realRatingMatrix')
as(ratings_matrix, 'realRatingMatrix')
str(ratings_matrix)
ratings[ratings == 99] <- NA
ratings <- ratings[1:5000,]
ratings <- as.matrix(ratings)
# Create large dgCMatrix
finalRatings <- as(ratings, 'realRatingMatrix')
jester <- read_xls("jester-data-1.xls", col_names = FALSE)
colnames(jester) <- c("ratingCount", seq(100))
row.names(jester) <- 1:nrow(jester)
# Remove num jokes column
ratings <- jester[-1]
# Replace 99 (no rating) with NA
ratings[ratings == 99] <- NA
# Subset to first 5000 users
ratings <- ratings[1:5000,]
# Create user- and item-specific rating counts
jokeCount <- rowSums(!is.na(ratings))
userCount <- colSums(!is.na(ratings))
# Function to replace NA with column medians
medValue.f <- function(x){
x[is.na(x)] = median(x, na.rm=TRUE)
return(x)
}
ratings_impute <- apply(ratings, 2, medValue.f)
ratings_matrix <- as.matrix(ratings_impute)
recclab_ratings <- as(ratings_matrix, 'realRatingMatrix')
as(ratings_matrix, 'realRatingMatrix')
ratings_matrix <- as(ratings_impute, 'matrix')
recclab_ratings <- as(ratings_matrix, 'realRatingMatrix')
recclab_ratings <- as(as(ratings_impute, 'matrix'), 'realRatingMatrix')
install.packages('recommenderlab')
ratings_matrix <- as.matrix(ratings_impute)
recclab_ratings <- as(ratings_matrix, 'realRatingMatrix')
library(recommenderlab)
ratings_matrix <- as.matrix(ratings_impute)
recclab_ratings <- as(ratings_matrix, 'realRatingMatrix')
hist(jokeCount,
main = 'Number of Jokes Rated per User',
xlab = 'Number of Jokes Rated',
ylab = 'Number of Users')
hist(userCount,
main = 'Number of Individuals Rating each Joke',
xlab = 'Number of Users that Rated Joke',
ylab = 'Number of Jokes')
# Mean and median joke rating
(mean(as.matrix(ratings), na.rm = TRUE))
(median(as.matrix(ratings), na.rm = TRUE))
# Histogram of ratings
hist(as.matrix(ratings), main = "Histogram of ratings")
# Histogram of ratings
hist(as.matrix(ratings),
main = "Histogram of ratings",
xlab = 'Rating',
ylab = 'Number of jokes')
# Mean and median joke rating
(mean(as.matrix(ratings), na.rm = TRUE))
(median(as.matrix(ratings), na.rm = TRUE))
# Histogram of ratings
hist(as.matrix(ratings),
main = "Histogram of ratings",
xlab = 'Rating',
ylab = 'Number of jokes')
set.seed(612)
trainPct <- 0.8
toKeep <- 15
ratingThreshold <- 2
# define evaluation scheme
e <- evaluationScheme(recclab_ratings, method = "split", train = trainPct, given = toKeep, goodRating = ratingThreshold)
library(tictoc)
tic("Train - recommenderlab")
recclab_recc <- Recommender(getData(e, "train"), method = "ALS", param = list(n_factors = 10, lambda = 0.1, n_iterations = 10, seed = 612))
toc(log = TRUE, quiet = TRUE)
recclab_recc
start <- Sys.time()
tic("Predict - recommenderlab")
recclab_pred <- predict(recclab_recc, getData(e, "known"), type="ratings")
toc(log = TRUE, quiet = TRUE)
stop <- Sys.time()
ratings_df <- as.data.frame(ratings_impute)
ratings_df$user <- 1:nrow(ratings_df)
ratings_df <- ratings_df %>% gather("item", "rating", -user)
library(tidyverse)
library(pander)
library(knitr)
library(dplyr)
library(recommenderlab)
library(readxl)
library(sparklyr)
library(tictoc)
ratings_df$user <- 1:nrow(ratings_df)
ratings_df <- ratings_df %>% gather("item", "rating", -user)
ratings_df$item <- as.numeric(ratings_df$item)
ratings_df$rating <- as.numeric(ratings_df$rating)
ratings_df <- arrange(ratings_df, user, item)
View(ratings_df)
sc <- spark_connect(master = "local", spark_home = "C:\\Spark\\spark-2.4.6-bin-hadoop2.7")
#sc <- spark_connect(master = "local", spark_home = "C:\\Spark\\spark-2.4.6-bin-hadoop2.7")
sc <- spark_connect(master = "local",)
#sc <- spark_connect(master = "local", spark_home = "C:\\Spark\\spark-2.4.6-bin-hadoop2.7")
sc <- spark_connect(master = "local")
spark_install()
#sc <- spark_connect(master = "local", spark_home = "C:\\Spark\\spark-2.4.6-bin-hadoop2.7")
sc <- spark_connect(master = "local")
sparklyr_ratings <- sdf_copy_to(sc, ratings_df)
tic("Train - sparklyr")
sparklyr_recc <- ml_als(sparklyr_ratings, rating_col = "rating", user_col = "user", item_col = "item", rank = 10, reg_param = 0.1, max_iter = 10)
toc(log = TRUE, quiet = TRUE)
start <- Sys.time()
tic("Predict - sparklyr")
sparklyr_pred <- ml_predict(sparklyr_recc, sparklyr_ratings)
toc(log = TRUE, quiet = TRUE)
stop <- Sys.time()
(recclab_error <- calcPredictionAccuracy(recclab_pred, getData(e, "unknown")))
(recclab_time <- stop - start)
log <- as.data.frame(unlist(tic.log(format = TRUE)))
colnames(log) <- c("Run Time")
knitr::kable(log, format = "html") %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
sparklyr_df <- as.data.frame(sparklyr_pred)
(sparklyr_error <- c(
"RMSE" = RMSE(sparklyr_df$rating, sparklyr_df$prediction),
"MSE" = MSE(sparklyr_df$rating, sparklyr_df$prediction),
"MAE" = MAE(sparklyr_df$rating, sparklyr_df$prediction)
)
)
(sparklyr_time <- stop - start)
set.seed(612)
trainPct <- 0.8
toKeep <- 15
ratingThreshold <- 2
# define evaluation scheme
e <- evaluationScheme(recclab_ratings, method = "split", train = trainPct, given = toKeep, goodRating = ratingThreshold)
# Defining an evaluation scheme
set.seed(612)
trainPct <- 0.8
toKeep <- 15
ratingThreshold <- 2
# define evaluation scheme
tic("Train - recommenderlab")
e <- evaluationScheme(recclab_ratings, method = "split", train = trainPct, given = toKeep, goodRating = ratingThreshold)
# define evaluation scheme
tic("Train - recommenderlab")
e <- evaluationScheme(recclab_ratings, method = "split", train = trainPct, given = toKeep, goodRating = ratingThreshold)
# training recommender system
recclab_recc <- Recommender(getData(e, "train"), method = "ALS", param = list(n_factors = 10, lambda = 0.1, n_iterations = 10, seed = 612))
toc(log = TRUE, quiet = TRUE)
# predicting
start <- Sys.time()
tic("Predict - recommenderlab")
recclab_pred <- predict(recclab_recc, getData(e, "known"), type="ratings")
toc(log = TRUE, quiet = TRUE)
stop <- Sys.time()
(recclab_error <- calcPredictionAccuracy(recclab_pred, getData(e, "unknown")))
(recclab_time <- stop - start)
log <- as.data.frame(unlist(tic.log(format = TRUE)))
log
colnames(log) <- c("Run Time")
log
(recclab_error <- calcPredictionAccuracy(recclab_pred, getData(e, "unknown")))
(recclab_time <- stop - start)
ratings_df <- as.data.frame(ratings_impute)
ratings_df$user <- 1:nrow(ratings_df)
ratings_df <- ratings_df %>% gather("item", "rating", -user)
ratings_df$item <- as.numeric(ratings_df$item)
ratings_df$rating <- as.numeric(ratings_df$rating)
ratings_df <- arrange(ratings_df, user, item)
sc <- spark_connect(master = "local")
sparklyr_ratings <- sdf_copy_to(sc, ratings_df)
sparklyr_df <- as.data.frame(sparklyr_pred)
(sparklyr_error <- c(
"RMSE" = RMSE(sparklyr_df$rating, sparklyr_df$prediction),
"MSE" = MSE(sparklyr_df$rating, sparklyr_df$prediction),
"MAE" = MAE(sparklyr_df$rating, sparklyr_df$prediction)
)
)
(sparklyr_time <- stop - start)
rm(list=ls())
library(tidyverse)
library(pander)
library(knitr)
library(dplyr)
library(recommenderlab)
library(readxl)
library(tictoc)
library(sparklyr)
# Read jester data
jester <- data.frame(read_xls("jester-data-1.xls", col_names = FALSE))
colnames(jester) <- c("ratingCount", seq(100))
row.names(jester) <- 1:nrow(jester)
# Remove num jokes column
ratings <- jester[-1]
# Replace 99 (no rating) with NA
ratings[ratings == 99] <- NA
# Subset to first 5000 users
ratings <- ratings[1:5000,]
# Create user- and item-specific rating counts
jokeCount <- rowSums(!is.na(ratings))
userCount <- colSums(!is.na(ratings))
hist(jokeCount,
main = 'Number of Jokes Rated per User',
xlab = 'Number of Jokes Rated',
ylab = 'Number of Users')
hist(userCount,
main = 'Number of Individuals Rating each Joke',
xlab = 'Number of Users that Rated Joke',
ylab = 'Number of Jokes')
paste0('Mean Rating : ',mean(as.matrix(ratings), na.rm = TRUE))
paste0('Median Rating: ', median(as.matrix(ratings), na.rm = TRUE))
# Histogram of ratings
hist(as.matrix(ratings),
main = "Histogram of ratings",
xlab = 'Rating',
ylab = 'Number of jokes')
# Mean and median joke rating
paste0('Mean Rating : ',mean(as.matrix(ratings), na.rm = TRUE), '\n', 'amber')
# Mean and median joke rating
paste(paste0('Mean Rating : ',mean(as.matrix(ratings), na.rm = TRUE)), paste0('Median Rating: ', median(as.matrix(ratings), na.rm = TRUE), sep="\n")
# Mean and median joke rating
paste(paste0('Mean Rating : ',mean(as.matrix(ratings), na.rm = TRUE), paste0('Median Rating: ', median(as.matrix(ratings), na.rm = TRUE), sep="\n")
paste0('Mean Rating : ',mean(as.matrix(ratings), na.rm = TRUE)
paste0('Mean Rating : ',mean(as.matrix(ratings), na.rm = TRUE))
paste0('Mean Rating : ', mean(as.matrix(ratings), na.rm = TRUE))
paste0('Median Rating: ', median(as.matrix(ratings), na.rm = TRUE))
paste(paste0('Mean Rating : ', mean(as.matrix(ratings), na.rm = TRUE)), paste0('Median Rating: ', median(as.matrix(ratings), na.rm = TRUE)), sep="\n")
paste0('Mean Rating : ', mean(as.matrix(ratings), na.rm = TRUE))
paste0('Median Rating: ', median(as.matrix(ratings), na.rm = TRUE))
hist(as.matrix(ratings),
main = "Histogram of ratings",
xlab = 'Rating',
ylab = 'Number of jokes')
# Function to replace NA with column medians
medValue.f <- function(x){
x[is.na(x)] = median(x, na.rm=TRUE)
return(x)
}
ratings_impute <- apply(ratings, 2, medValue.f)
# Create large dgCMatrix
ratings_matrix <- as.matrix(ratings_impute)
recclab_ratings <- as(ratings_matrix, 'realRatingMatrix')
set.seed(612)
trainPct <- 0.8
toKeep <- 15
ratingThreshold <- 2
# define evaluation scheme
tic("Train - recommenderlab")
e <- evaluationScheme(recclab_ratings, method = "split", train = trainPct, given = toKeep, goodRating = ratingThreshold)
# training recommender system
recclab_recc <- Recommender(getData(e, "train"), method = "ALS", param = list(n_factors = 10, lambda = 0.1, n_iterations = 10, seed = 612))
toc(log = TRUE, quiet = TRUE)
# predicting
start <- Sys.time()
tic("Predict - recommenderlab")
recclab_pred <- predict(recclab_recc, getData(e, "known"), type="ratings")
toc(log = TRUE, quiet = TRUE)
stop <- Sys.time()
(recclab_error <- calcPredictionAccuracy(recclab_pred, getData(e, "unknown")))
(recclab_time <- stop - start)
ratings_df <- as.data.frame(ratings_impute)
ratings_df$user <- 1:nrow(ratings_df)
ratings_df <- ratings_df %>% gather("item", "rating", -user)
ratings_df$item <- as.numeric(ratings_df$item)
ratings_df$rating <- as.numeric(ratings_df$rating)
ratings_df <- arrange(ratings_df, user, item)
sc <- spark_connect(master = "local")
spark_disconnect(sc)
sc <- spark_connect(master = "local")
sparklyr_ratings <- sdf_copy_to(sc, ratings_df)
# train
tic("Train - sparklyr")
sparklyr_recc <- ml_als(sparklyr_ratings, rating_col = "rating", user_col = "user", item_col = "item", rank = 10, reg_param = 0.1, max_iter = 10)
toc(log = TRUE, quiet = TRUE)
# predict
sparkStart <- Sys.time()
tic("Predict - sparklyr")
sparklyr_pred <- ml_predict(sparklyr_recc, sparklyr_ratings)
toc(log = TRUE, quiet = TRUE)
sparkEnd <- Sys.time()
sparklyr_df <- as.data.frame(sparklyr_pred)
(sparklyr_error <- c(
"RMSE" = RMSE(sparklyr_df$rating, sparklyr_df$prediction),
"MSE" = MSE(sparklyr_df$rating, sparklyr_df$prediction),
"MAE" = MAE(sparklyr_df$rating, sparklyr_df$prediction)
)
)
(sparklyr_time <- sparkEnd - sparkStart)
spark_disconnect(sc)
log <- as.data.frame(unlist(tic.log(format = TRUE)))
colnames(log) <- c("Run Time")
knitr::kable(log, format = "html") %>%
kableExtra::kable_styling(bootstrap_options = c("striped", "hover"))
sparklyr_error
rbind(sparklyr_error, recclab_error)
300/11
View( as.data.frame(ratings_impute))
ratings_df <- as.data.frame(ratings_impute)
View(ratings_df)
ratings_df$user <- 1:nrow(ratings_df)
ratings_df <- ratings_df %>% gather("item", "rating", -user)
ratings_df <- as.data.frame(ratings_impute)
ratings_df$user <- 1:nrow(ratings_df)
ratings_df <- ratings_df %>% gather("item", "rating", -user)
ratings_df$item <- as.numeric(ratings_df$item)
ratings_df$rating <- as.numeric(ratings_df$rating)
ratings_df <- arrange(ratings_df, user, item)
ratings_df <- as.data.frame(ratings_impute)
ratings_df$user <- 1:nrow(ratings_df)
ratings_df %>% gather("item", "rating", -user)
ratings_df <- ratings_df %>% gather("item", "rating", -user)
View(ratings_df)
ratings_df$item <- as.numeric(ratings_df$item)
ratings_df$rating <- as.numeric(ratings_df$rating)
ratings_df <- arrange(ratings_df, user, item)
View(ratings_df)
data.frame(
user   = c(1, 2, 0, 1, 2, 0),
item   = c(1, 1, 1, 2, 2, 0),
rating = c(3, 1, 2, 4, 5, 4)
)
5000*100
sc <- spark_connect(master = "local", spark_home = "C:\\Spark\\spark-2.4.6-bin-hadoop2.7")
sc <- spark_connect(master = "local", spark_home = "C:\\Spark\\spark-2.4.6-bin-hadoop2.7")
sc <- spark_connect(master = "local", spark_home = "C:\\Spark\\spark-2.4.6-bin-hadoop2.7\\tmp\\hadoop")
sc <- spark_connect(master = "local", spark_home = "C:\\Spark\\spark-2.4.6-bin-hadoop2.7\\tmp\\hadoop\\bin")
sc <- spark_connect(master = "local", spark_home = "C:/Spark/spark-2.4.6-bin-hadoop2.7")
sc <- spark_connect(master = "local", spark_home = "C:/Spark/spark-2.4.6-bin-hadoop2.7/")
sc <- spark_connect(master = "local", spark_home = "C:/Spark/spark-2.4.6-bin-hadoop2.7/tmp/hadoop")
#sc <- spark_connect(master = "local", spark_home = "C:/Spark/spark-2.4.6-bin-hadoop2.7/tmp/hadoop")
sc <- spark_connect(master = "local")
