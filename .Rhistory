setwd("~/Data_Science/DATA_612_Recommender_Systems")
rawData <- data.frame(read.csv('\\project1_data\\ratings_small.csv'))
getwd()
rawData <- data.frame(read.csv('/project1_data/ratings_small.csv'))
rawData <- data.frame(read.csv('C:/Users/aferg/Documents/Data_Science/DATA_612_Recommender_Systems/project1_data/ratings_small.csv'))
# top 10 movies
top10 <- rawData %>%
group_by(movieId) %>%
summarize(TOTAL_RATINGS = n()) %>%
arrange(desc(TOTAL_RATINGS)) %>%
mutate(RECORD_ID = as.numeric(rownames(.))) %>%
filter(RECORD_ID <= 10)
library(tidyverse)
# top 10 movies
top10 <- rawData %>%
group_by(movieId) %>%
summarize(TOTAL_RATINGS = n()) %>%
arrange(desc(TOTAL_RATINGS)) %>%
mutate(RECORD_ID = as.numeric(rownames(.))) %>%
filter(RECORD_ID <= 10)
# join top 10 movies to users
dataSubset <- inner_join(rawData, top10, by=c('movieId'='movieId'))
# final Samples
sampledData <- dataSubset %>%
group_by(userId) %>%
summarize(MOVIE_COUNT = n()) %>%
filter(MOVIE_COUNT >= 6) %>%
group_by(MOVIE_COUNT) %>%
sample_n(2)
finalData <- inner_join(dataSubset, sampledData, by=c("userId" = "userId"))
View(finalData)
finalData <- inner_join(dataSubset, sampledData, by=c("userId" = "userId")) %>%
select(userId,movieId,rating)
spread(finalData,movieId,rating)
amber <0 spread(finalData,movieId,rating)
amber <- spread(finalData,movieId,rating)
View(amber)
setwd("~/Data_Science/data612_group_assignments")
rawData <- data.frame(read.csv('ratings_small.csv'))
getwd()
rawData <- data.frame(read.csv('/ratings_small.csv'))
rawData <- data.frame(read.csv("ratings_small.csv"))
read.csv("ratings_small.csv")
rawData <- data.frame(read.csv("/ratings_small.csv"))
rawData <- data.frame(read.csv("https://github.com/chrosemo/data612_group_assignments/blob/master/ratings_small.csv"))
rawData <- data.frame(read.csv("https://raw.githubusercontent.com/chrosemo/data612_group_assignments/master/ratings_small.csv?token=AA64OBTS4PXWKTWOBCQAUSC63AXWQ"))
top10 <- rawData %>%
group_by(movieId) %>%
summarize(TOTAL_RATINGS = n()) %>%
arrange(desc(TOTAL_RATINGS)) %>%
mutate(RECORD_ID = as.numeric(rownames(.))) %>%
filter(RECORD_ID <= 10)
# join top 10 movies to users
dataSubset <- inner_join(rawData, top10, by=c('movieId'='movieId'))
# final Samples
sampledData <- dataSubset %>%
group_by(userId) %>%
summarize(MOVIE_COUNT = n()) %>%
filter(MOVIE_COUNT >= 6) %>%
group_by(MOVIE_COUNT) %>%
sample_n(2)
finalData <- inner_join(dataSubset, sampledData, by=c("userId" = "userId")) %>%
select(userId,movieId,rating)
finalData.df <- spread(finalData,movieId,rating)
View(finalData.df)
finalData.df
View(finalData.df)
rawData <- data.frame(read.csv("https://raw.githubusercontent.com/chrosemo/data612_group_assignments/master/ratings_small.csv?token=AA64OBTS4PXWKTWOBCQAUSC63AXWQ"))
rawData <- data.frame(read.csv("https://raw.githubusercontent.com/chrosemo/data612_group_assignments/master/ratings_small.csv?token=AA64OBXXPYEATF5CGWGSQFC63AZPW"))
View(finalData)
finalData %>%
filter(is.na(rating))
View(finalData)
top10 %>%
select(movieId) %>%
distinct()
View(sampledData)
View(dataSubset)
ratings <- as.data.frame(lapply(finalData.df, function(x) x[sample(c(TRUE, NA), prob=c(0.9, 0.1), size=length(x), replace=TRUE)]))
View(ratings)
rawData <- data.frame(read.csv("https://raw.githubusercontent.com/chrosemo/data612_group_assignments/master/ratings_small.csv?token=AA64OBXXPYEATF5CGWGSQFC63AZPW"))
gather(finalData.df,movieId,rating)
test <- gather(finalData.df,userId,rating)
View(test)
test <- gather(finalData.df,userId,rating, -movieId)
View(finalData.df)
test <- gather(finalData.df,movieId,rating, -userId)
View(test)
allValues <- gather(finalData.df,movieId,rating, -userId)
View(allValues)
allValues %>%
arrange(userId, movieId)
allValues %>%
filter(!is.na(rating)) %>%
group_by(userId) %>%
sample(1)
allValues %>%
filter(!is.na(rating)) %>%
group_by(userId) %>%
sample_n(1)
testSet <- allValues %>%
filter(!is.na(rating)) %>%
group_by(userId) %>%
sample_n(1)
trainingSet <- anti_join(finalData.df, testSet, by=c('userId'='userId', 'movieId'='movieId'))
trainingSet <- anti_join(allValues, testSet, by=c('userId'='userId', 'movieId'='movieId'))
View(trainingSet)
View(testSet)
rawData <- data.frame(read.csv("https://raw.githubusercontent.com/chrosemo/data612_group_assignments/master/ratings_small.csv"))
rawData <- data.frame(read.csv("ratings_small.csv"))
install.packages('pander')
set.seed(200)
rawData <- data.frame(read.csv("ratings_small.csv"))
# top 10 movies
top10 <- rawData %>%
group_by(movieId) %>%
summarize(TOTAL_RATINGS = n()) %>%
arrange(desc(TOTAL_RATINGS)) %>%
mutate(RECORD_ID = as.numeric(rownames(.))) %>%
filter(RECORD_ID <= 10)
# all users that have at least 1 of the top 10 movies
dataSubset <- inner_join(rawData, top10, by=c('movieId'='movieId'))
# user IDs to be used in final dataset
sampledData <- dataSubset %>%
group_by(userId) %>%
summarize(MOVIE_COUNT = n()) %>%
filter(MOVIE_COUNT >= 6) %>%
group_by(MOVIE_COUNT) %>%
sample_n(2)
# final data set in long format
finalData <- inner_join(dataSubset, sampledData, by=c("userId" = "userId")) %>%
select(userId,movieId,rating)
# final data matrix
finalData.df <- spread(finalData,movieId,rating)
head(finalData.df)
# gather data -- long format
allValues <- gather(finalData.df,movieId,rating, -userId)
testSet <- allValues %>%
filter(!is.na(rating)) %>% # do not include nulls
group_by(userId) %>%
sample_n(1)
trainingSet <- anti_join(allValues, testSet, by=c('userId'='userId', 'movieId'='movieId'))
raw_avg <- mean(trainingSet$rating, na.rm =TRUE)
raw_avg
RMSE <- function(data, data_avg){
sqrt(mean((data - data_avg)^2, na.rm =TRUE))
}
trainRMSE <- RMSE(trainingSet$rating,raw_avg )
trainRMSE
testRMSE <- RMSE(testSet$rating,raw_avg)
testRMSE
train_matrix <- trainingSet %>%
spread(movieId, rating) %>%
column_to_rownames(var = "userId")
# calculate bias for each user and each movie
user_bias <- rowMeans(train_matrix, na.rm = TRUE) - raw_avg
item_bias <- colMeans(train_matrix, na.rm = TRUE) - raw_avg
user_bias
item_bias
blp <- function(x,y) x + y + raw_avg
baseline_predictor <- data.frame(
sapply(1:10, function(i) sapply(1:10, function(j) blp(user_bias[j], item_bias[i]))),
row.names = rownames(train_matrix))
names(baseline_predictor) <- names(train_matrix)
# Clipping max and min values
baseline_predictor[baseline_predictor > 5] <- 5
baseline_predictor[baseline_predictor < 0.5] <- 0.5
test_matrix <- testSet %>%
spread(movieId, rating) %>%
column_to_rownames(var = "userId")
# Applying baseline predictor function to each user-item combination of test_matrix (10x8)
baseline_predictor_test <- data.frame(
t(sapply(rownames(test_matrix),
function(i) sapply(names(test_matrix),
function(j) blp(user_bias[i], item_bias[j])
))))
names(baseline_predictor_test) <- names(test_matrix)
baseline_predictor_test[baseline_predictor_test > 5] <- 5
baseline_predictor_test[baseline_predictor_test < 0.5] <- 0.5
# Quick check of whether baseline predictions were created consistently across train_matrix and test_matrix
baseline_predictor_test$`356` == baseline_predictor$`356`
View(test_matrix)
# Creating a function to calculate RMSE on each matrix using the baseline predictions
predictor_RMSE <- function(matrix, predictions) sqrt(sum((matrix - predictions)^2, na.rm = TRUE)/sum(!is.na(matrix)))
# Baseline predictor RMSE for train_matrix and test_matrix
(train_predictor_RMSE <- predictor_RMSE(train_matrix, baseline_predictor))
(test_predictor_RMSE <- predictor_RMSE(test_matrix, baseline_predictor_test))
test_matrix[4,5]
# actual value
test_matrix[5,2]
baseline_predictor_test[5,2]
test_matrix[5,2]
# predicted value
baseline_predictor_test[5,2]
RMSE(test_matrix[5,2], baseline_predictor_test[5,2])
