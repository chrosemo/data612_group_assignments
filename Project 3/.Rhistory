error_ubcf
error_trim
RMSE.ls[137]
variance.table
sum(variance.table)
RMSE <- function(matrix, predictions) sqrt(sum((matrix - predictions)^2, na.rm = TRUE)/sum(!is.na(matrix)))
# Calculate RMSE based on number of dimensions
calcError <- function(dim){
# SVD with specified number of factors
tempRated <- most_rated
SVD <- svd(tempRated@data, nu = dim, nv = dim)
finalMatrix <- SVD$u %*% diag(SVD$d[1:dim]) %*% t(SVD$v)
tempRated@data <- as(finalMatrix, 'dgCMatrix')
totalVar <- sum(prop.table(SVD$d^2))
error.ls <- c(k = dim, var = totalVar, RMSE(tempRated@data, most_rated@data))
# calculate RMSE
return(error.ls)
}
nDim <- 2:min(nrow(most_rated@data), ncol(most_rated@data))
RMSE.ls <- lapply(nDim, calcError)
RMSE.ls
RMSE <- function(matrix, predictions) sqrt(sum((matrix - predictions)^2, na.rm = TRUE)/sum(!is.na(matrix)))
# Calculate RMSE based on number of dimensions
calcError <- function(dim){
# SVD with specified number of factors
tempRated <- most_rated
SVD <- svd(tempRated@data, nu = dim, nv = dim)
finalMatrix <- SVD$u %*% diag(SVD$d[1:dim]) %*% t(SVD$v)
tempRated@data <- as(finalMatrix, 'dgCMatrix')
totalVar <- sum(prop.table(SVD$d[1:dim]^2))
error.ls <- c(k = dim, var = totalVar, rmse = RMSE(tempRated@data, most_rated@data))
# calculate RMSE
return(error.ls)
}
nDim <- 2:min(nrow(most_rated@data), ncol(most_rated@data))
RMSE.ls <- lapply(nDim, calcError)
RMSE.ls[1]
RMSE.ls[2]
RMSE.ls[4]
RMSE.ls
variance.table
variance.table[1:5]
RMSE <- function(matrix, predictions) sqrt(sum((matrix - predictions)^2, na.rm = TRUE)/sum(!is.na(matrix)))
# Calculate RMSE based on number of dimensions
calcError <- function(dim){
# SVD with specified number of factors
tempRated <- most_rated
SVD <- svd(tempRated@data, nu = dim, nv = dim)
finalMatrix <- SVD$u %*% diag(SVD$d[1:dim]) %*% t(SVD$v)
tempRated@data <- as(finalMatrix, 'dgCMatrix')
variance.table <- prop.table(SVD$d^2)
totalVar <- sum(variance.table[1:dim])
print(totalVar)
error.ls <- c(k = dim, var = totalVar, rmse = RMSE(tempRated@data, most_rated@data))
# calculate RMSE
return(error.ls)
}
nDim <- 2:min(nrow(most_rated@data), ncol(most_rated@data))
RMSE.ls <- lapply(nDim, calcError)
RMSE.ls
variance.table
total_variance
# Plot of RMSE relative to number of dimensions k
plot(unlist(RMSE.ls),
main = 'RMSE vs k',
xlab = 'k',
ylab = 'RMSE')
View(RMSE.ls)
RMSE <- function(matrix, predictions) sqrt(sum((matrix - predictions)^2, na.rm = TRUE)/sum(!is.na(matrix)))
# Calculate RMSE based on number of dimensions
calcError <- function(dim){
# SVD with specified number of factors
tempRated <- most_rated
SVD <- svd(tempRated@data)
#SVD <- svd(tempRated@data, nu = dim, nv = dim)
finalMatrix <- SVD$u %*% diag(SVD$d[1:dim]) %*% t(SVD$v)
tempRated@data <- as(finalMatrix, 'dgCMatrix')
variance.table <- prop.table(SVD$d^2)
totalVar <- sum(variance.table[1:dim])
error.ls <- c(k = dim, var = totalVar, rmse = RMSE(tempRated@data, most_rated@data))
# calculate RMSE
return(error.ls)
}
nDim <- 2:min(nrow(most_rated@data), ncol(most_rated@data))
RMSE.ls <- lapply(nDim, calcError)
# Calculate RMSE based on number of dimensions
calcError <- function(dim){
# SVD with specified number of factors
tempRated <- most_rated
SVD <- svd(tempRated@data, nu = dim, nv = dim)
finalMatrix <- SVD$u %*% diag(SVD$d[1:dim]) %*% t(SVD$v)
print(dim(SVD$u))
tempRated@data <- as(finalMatrix, 'dgCMatrix')
variance.table <- prop.table(SVD$d^2)
totalVar <- sum(variance.table[1:dim])
error.ls <- c(k = dim, var = totalVar, rmse = RMSE(tempRated@data, most_rated@data))
# calculate RMSE
return(error.ls)
}
nDim <- 2:min(nrow(most_rated@data), ncol(most_rated@data))
RMSE.ls <- lapply(nDim, calcError)
#Calculate RMSE
RMSE <- function(matrix, predictions) sqrt(sum((matrix - predictions)^2, na.rm = TRUE)/sum(!is.na(matrix)))
# Calculate RMSE based on number of dimensions
calcError <- function(dim){
# SVD with specified number of factors
tempRated <- most_rated
SVD <- svd(tempRated@data, nu = dim, nv = dim)
finalMatrix <- SVD$u %*% diag(SVD$d[1:dim]) %*% t(SVD$v)
print(dim(SVD$d))
tempRated@data <- as(finalMatrix, 'dgCMatrix')
variance.table <- prop.table(SVD$d^2)
totalVar <- sum(variance.table[1:dim])
error.ls <- c(k = dim, var = totalVar, rmse = RMSE(tempRated@data, most_rated@data))
# calculate RMSE
return(error.ls)
}
nDim <- 2:min(nrow(most_rated@data), ncol(most_rated@data))
RMSE.ls <- lapply(nDim, calcError)
calcError <- function(dim){
# SVD with specified number of factors
tempRated <- most_rated
SVD <- svd(tempRated@data, nu = dim, nv = dim)
finalMatrix <- SVD$u %*% diag(SVD$d[1:dim]) %*% t(SVD$v)
print(nrow(SVD$d))
tempRated@data <- as(finalMatrix, 'dgCMatrix')
variance.table <- prop.table(SVD$d^2)
totalVar <- sum(variance.table[1:dim])
error.ls <- c(k = dim, var = totalVar, rmse = RMSE(tempRated@data, most_rated@data))
# calculate RMSE
return(error.ls)
}
nDim <- 2:min(nrow(most_rated@data), ncol(most_rated@data))
RMSE.ls <- lapply(nDim, calcError)
calcError <- function(dim){
# SVD with specified number of factors
tempRated <- most_rated
SVD <- svd(tempRated@data, nu = dim, nv = dim)
finalMatrix <- SVD$u %*% diag(SVD$d[1:dim]) %*% t(SVD$v)
tempRated@data <- as(finalMatrix, 'dgCMatrix')
variance.table <- prop.table(SVD$d^2)
print(variance.table)
totalVar <- sum(variance.table[1:dim])
error.ls <- c(k = dim, var = totalVar, rmse = RMSE(tempRated@data, most_rated@data))
# calculate RMSE
return(error.ls)
}
nDim <- 2:min(nrow(most_rated@data), ncol(most_rated@data))
RMSE.ls <- lapply(nDim, calcError)
plot(unlist(RMSE.ls),
main = 'RMSE vs k',
xlab = 'k',
ylab = 'RMSE')
plot(SVD$d)
SVD$d
svd$d^2
(svd$d)^2
SVD$d^2
sum(SVD$d^2)
variance.table
sum(variance.table)
calcError <- function(dim){
# SVD with specified number of factors
tempRated <- most_rated
SVD <- svd(tempRated@data)
finalMatrix <- SVD$u[,1:dim] %*% diag(SVD$d[1:dim]) %*% t(SVD$v[,1:dim])
tempRated@data <- as(finalMatrix, 'dgCMatrix')
variance.table <- prop.table(SVD$d^2)
totalVar <- sum(variance.table[1:dim])
print(totalVar)
error.ls <- c(k = dim, var = totalVar, rmse = RMSE(tempRated@data, most_rated@data))
return(error.ls)
}
RMSE.ls <- lapply(nDim, calcError)
# Normalize (center) the ratings matrix
trim <- normalize(most_rated, method = "center")
# Perform SVD on normalized matrix
SVD <- svd(trim@data)
# Table of variances for each dimension
variance.table <- prop.table(SVD$d^2)
# Determining number of dimensions that explain ~90% of total variance
n_dims <- 0
total_variance <- 0
for (i in 1:length(variance.table)) {
total_variance <- total_variance + variance.table[i]
print(total_variance)
ifelse(total_variance <= 0.90, n_dims <- n_dims + 1, break)
}
calcError <- function(dim){
# SVD with specified number of factors
tempRated <- normalize(most_rated, method = "center")
SVD <- svd(tempRated@data)
finalMatrix <- SVD$u[,1:dim] %*% diag(SVD$d[1:dim]) %*% t(SVD$v[,1:dim])
tempRated@data <- as(finalMatrix, 'dgCMatrix')
variance.table <- prop.table(SVD$d^2)
totalVar <- sum(variance.table[1:dim])
print(totalVar)
error.ls <- c(k = dim, var = totalVar, rmse = RMSE(tempRated@data, most_rated@data))
return(error.ls)
}
RMSE.ls <- lapply(nDim, calcError)
# Calculate RMSE based on number of dimensions
calcError <- function(dim){
# SVD with specified number of factors
tempRated <- normalize(most_rated, method = "center")
SVD <- svd(tempRated@data, nu = dim, nv = dim)
finalMatrix <- SVD$u %*% diag(SVD$d[1:dim]) %*% t(SVD$v)
tempRated@data <- as(finalMatrix, 'dgCMatrix')
variance.table <- prop.table(SVD$d^2)
totalVar <- sum(variance.table[1:dim])
print(totalVar)
error.ls <- c(k = dim, var = totalVar, rmse = RMSE(tempRated@data, most_rated@data))
return(error.ls)
}
nDim <- 2:min(nrow(most_rated@data), ncol(most_rated@data))
RMSE.ls <- lapply(nDim, calcError)
plot(unlist(RMSE.ls),
main = 'RMSE vs k',
xlab = 'k',
ylab = 'RMSE')
trim <- normalize(most_rated, method = "center")
# Perform SVD on normalized matrix
SVD <- svd(trim@data)
# Table of variances for each dimension
variance.table <- prop.table(SVD$d^2)
# Determining number of dimensions that explain ~90% of total variance
rmse.ls = c()
n_dims <- 0
total_variance <- 0
for (i in 1:length(variance.table)) {
total_variance <- total_variance + variance.table[i]
finalMatrix <- SVD$u[,1:i] %*% diag(SVD$d[1:i]) %*% t(SVD$v[,1:i])
rmse.ls <- rbind(rmse.ls,RMSE(as(finalMatrix, 'dgCMatrix'), most_rated@data))
ifelse(total_variance <= 0.90, n_dims <- n_dims + 1, break)
}
diag(SVD$d[1:5])
rmse.ls = c()
n_dims <- 0
total_variance <- 0
for (i in 1:length(variance.table)) {
total_variance <- total_variance + variance.table[i]
print(i)
finalMatrix <- SVD$u[,1:i] %*% diag(SVD$d[1:i]) %*% t(SVD$v[,1:i])
rmse.ls <- rbind(rmse.ls,RMSE(as(finalMatrix, 'dgCMatrix'), most_rated@data))
# Determining number of dimensions that explain ~90% of total variance
rmse.ls = c()
n_dims <- 0
total_variance <- 0
for (i in 1:length(variance.table)) {
total_variance <- total_variance + variance.table[i]
print(i)
finalMatrix <- SVD$u[,1:i] %*% diag(SVD$d[1:i]) %*% t(SVD$v[,1:i])
rmse.ls <- rbind(rmse.ls,RMSE(as(finalMatrix, 'dgCMatrix'), most_rated@data))
ifelse(total_variance <= 0.90, n_dims <- n_dims + 1, break)
}
rmse.ls = c()
n_dims <- 0
total_variance <- 0
for (i in 1:length(variance.table)) {
total_variance <- total_variance + variance.table[i]
if (i = 1){
rmse.ls = c()
n_dims <- 0
total_variance <- 0
for (i in 1:length(variance.table)) {
total_variance <- total_variance + variance.table[i]
if (i == 1){
finalMatrix <- SVD$u[,1:i] %*% SVD$d %*% t(SVD$v[,1:i])
rmse.ls <- rbind(rmse.ls,RMSE(as(finalMatrix, 'dgCMatrix'), most_rated@data))
} else {
finalMatrix <- SVD$u[,1:i] %*% diag(SVD$d[1:i]) %*% t(SVD$v[,1:i])
rmse.ls <- rbind(rmse.ls,RMSE(as(finalMatrix, 'dgCMatrix'), most_rated@data))
}
ifelse(total_variance <= 0.90, n_dims <- n_dims + 1, break)
}
rmse.ls = c()
n_dims <- 0
total_variance <- 0
for (i in 1:length(variance.table)) {
total_variance <- total_variance + variance.table[i]
if (i == 1){
finalMatrix <- SVD$u[,1:i] %*% t(SVD$v[,1:i]) * SVD$d
rmse.ls <- rbind(rmse.ls,RMSE(as(finalMatrix, 'dgCMatrix'), most_rated@data))
} else {
finalMatrix <- SVD$u[,1:i] %*% diag(SVD$d[1:i]) %*% t(SVD$v[,1:i])
rmse.ls <- rbind(rmse.ls,RMSE(as(finalMatrix, 'dgCMatrix'), most_rated@data))
}
ifelse(total_variance <= 0.90, n_dims <- n_dims + 1, break)
}
rmse.ls
# Calculate RMSE based on number of dimensions
calcError <- function(dim){
# SVD with specified number of factors
tempRated <- normalize(most_rated, method = "center")
SVD <- svd(tempRated@data, nu = dim, nv = dim)
finalMatrix <- SVD$u %*% diag(SVD$d[1:dim]) %*% t(SVD$v)
tempRated@data <- as(finalMatrix, 'dgCMatrix')
return(RMSE(tempRated@data, most_rated@data))
}
RMSE.ls <- lapply(nDim, calcError)
plot(unlist(RMSE.ls),
main = 'RMSE vs k',
xlab = 'k',
ylab = 'RMSE')
plot(unlist(rmse.ls),
main = 'RMSE vs k',
xlab = 'k',
ylab = 'RMSE')
rmse.ls = c()
n_dims <- 0
total_variance <- 0
for (i in 1:length(variance.table)) {
total_variance <- total_variance + variance.table[i]
# calculate RMSE
if (i == 1){
finalMatrix <- SVD$u[,1:i] %*% t(SVD$v[,1:i]) * SVD$d
rmse.ls <- rbind(rmse.ls,RMSE(as(finalMatrix, 'dgCMatrix'), trim@data))
} else {
finalMatrix <- SVD$u[,1:i] %*% diag(SVD$d[1:i]) %*% t(SVD$v[,1:i])
rmse.ls <- rbind(rmse.ls,RMSE(as(finalMatrix, 'dgCMatrix'), trim@data))
}
ifelse(total_variance <= 0.90, n_dims <- n_dims + 1, break)
}
plot(unlist(rmse.ls),
main = 'RMSE vs k',
xlab = 'k',
ylab = 'RMSE')
n_dims
plot(variance.table)
plot(cumsum(variance.table))
# Normalize (center) the ratings matrix
trim <- normalize(most_rated, method = "center")
# Perform SVD on normalized matrix
SVD <- svd(trim@data)
# Table of variances for each dimension
variance.table <- prop.table(SVD$d^2)
plot(cumsum(variance.table),
main = 'Cumulative variance vs k',
xlab = 'k',
ylab = 'Cumulative Variance')
# Determining number of dimensions that explain ~90% of total variance
rmse.ls <- c()
n_dims <- 0
total_variance <- 0
for (i in 1:length(variance.table)) {
# calculate RMSE
if (i == 1){
finalMatrix <- SVD$u[,1:i] %*% t(SVD$v[,1:i]) * SVD$d
rmse.ls <- rbind(rmse.ls,RMSE(as(finalMatrix, 'dgCMatrix'), trim@data))
} else {
finalMatrix <- SVD$u[,1:i] %*% diag(SVD$d[1:i]) %*% t(SVD$v[,1:i])
rmse.ls <- rbind(rmse.ls,RMSE(as(finalMatrix, 'dgCMatrix'), trim@data))
}
# calculate variance
total_variance <- total_variance + variance.table[i]
ifelse(total_variance <= 0.90, n_dims <- n_dims + 1, break)
}
# Calculating trimmed prediction matrix
trimMatrix <- SVD$u[,1:n_dims] %*% diag(SVD$d[1:n_dims]) %*% t(SVD$v[,1:n_dims])
trim@data <- as(trimMatrix, 'dgCMatrix')
trim@data@Dimnames <- most_rated@data@Dimnames
cumsum(variance.table)
cumsum(variance.table) <= 0.9
plot(cumsum(variance.table),
main = 'Cumulative variance',
xlab = 'k',
ylab = 'Cumulative Variance')
RMSE <- function(matrix, predictions) sqrt(sum((matrix - predictions)^2, na.rm = TRUE)/sum(!is.na(matrix)))
rmse.ls <- c()
for (i in 1:length(variance.table)) {
# calculate RMSE
if (i == 1){
finalMatrix <- SVD$u[,1:i] %*% t(SVD$v[,1:i]) * SVD$d
rmse.ls <- rbind(rmse.ls,RMSE(as(finalMatrix, 'dgCMatrix'), trim@data))
} else {
finalMatrix <- SVD$u[,1:i] %*% diag(SVD$d[1:i]) %*% t(SVD$v[,1:i])
rmse.ls <- rbind(rmse.ls,RMSE(as(finalMatrix, 'dgCMatrix'), trim@data))
}
}
plot(unlist(rmse.ls),
main = 'RMSE vs k',
xlab = 'k',
ylab = 'RMSE')
rmse.ls
# Normalize (center) the ratings matrix
trim <- normalize(most_rated, method = "center")
# Perform SVD on normalized matrix
SVD <- svd(trim@data)
# Table of variances for each dimension
variance.table <- prop.table(SVD$d^2)
RMSE <- function(matrix, predictions) sqrt(sum((matrix - predictions)^2, na.rm = TRUE)/sum(!is.na(matrix)))
rmse.ls <- c()
for (i in 1:length(variance.table)) {
# calculate RMSE
if (i == 1){
finalMatrix <- SVD$u[,1:i] %*% t(SVD$v[,1:i]) * SVD$d
rmse.ls <- rbind(rmse.ls,RMSE(as(finalMatrix, 'dgCMatrix'), trim@data))
} else {
finalMatrix <- SVD$u[,1:i] %*% diag(SVD$d[1:i]) %*% t(SVD$v[,1:i])
rmse.ls <- rbind(rmse.ls,RMSE(as(finalMatrix, 'dgCMatrix'), trim@data))
}
}
plot(unlist(rmse.ls),
main = 'RMSE vs k',
xlab = 'k',
ylab = 'RMSE')
plot(cumsum(variance.table),
main = 'Cumulative variance',
xlab = 'k',
ylab = 'Cumulative Variance')
# Determining number of dimensions that explain ~90% of total variance
n_dims <- 0
total_variance <- 0
for (i in 1:length(variance.table)) {
# calculate variance
total_variance <- total_variance + variance.table[i]
ifelse(total_variance <= 0.90, n_dims <- n_dims + 1, break)
}
n_dims
error_trim
plot(error_ubcf)
barplot(error_ubcf)
str(error_ubcf)
rbind(error_ubcf, error_trim)
allErrors <- rbind(error_ubcf, error_trim)
View(allErrors)
allErrors <- cbind(error_ubcf, error_trim)
allErrors
barplot(allErrors, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(allErrors), beside=TRUE)
barplot(allErrors, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(allErrors), beside=TRUE)
allErrors <- rbind(error_ubcf, error_trim)
barplot(allErrors, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(allErrors), beside=TRUE)
allErrors <- rbind(error_ubcf, error_trim)
barplot(allErrors,
main="Prediction Error Comparison",
xlab="Error Type",
col=c("darkblue","red"),
legend = rownames(allErrors),
beside=TRUE)
barplot(allErrors,
main="Prediction Error Comparison",
xlab="Error Type",
col=c("blue","red"),
legend = rownames(allErrors),
beside=TRUE)
barplot(allErrors,
main="Prediction Error Comparison",
xlab="Error Type",
col=c("blue","green"),
legend = rownames(allErrors),
beside=TRUE)
barplot(allErrors,
main="Prediction Error Comparison",
xlab="Error Type",
col=c("blue","darkgreen"),
legend = rownames(allErrors),
beside=TRUE)
barplot(allErrors,
main="Prediction Error Comparison",
xlab="Error Type",
col=c("darkred","darkgreen"),
legend = rownames(allErrors),
beside=TRUE)
barplot(allErrors,
main="Prediction Error Comparison",
xlab="Error Type",
col=c("darkred","darkblue"),
legend = rownames(allErrors),
beside=TRUE)
barplot(allErrors,
main="Prediction Error Comparison",
xlab="Error Type",
col=c("darkgreen","darkblue"),
legend = rownames(allErrors),
beside=TRUE)
allErrors <- rbind(error_ubcf, error_trim)
barplot(allErrors,
main="Prediction Error Comparison",
xlab="Error Type",
col=c("darkgreen","darkblue"),
legend = rownames(allErrors),
beside=TRUE)
allErrors <- rbind(error_ubcf, error_trim)
xx <- barplot(allErrors,
main="Prediction Error Comparison",
xlab="Error Type",
col=c("darkgreen","darkblue"),
legend = rownames(allErrors),
beside=TRUE)
text(x = xx, y = allErrors$RMSE, label = allErrors$RMSE, pos = 3, cex = 0.8, col = "red")
allErrors['RMSE']
barplot(allErrors,
main="Prediction Error Comparison",
xlab="Error Type",
col=c("darkgreen","darkblue"),
legend = rownames(allErrors),
beside=TRUE)
allErrors <- rbind(error_ubcf, error_trim)
allErrors
barplot(allErrors,
main="Prediction Error Comparison",
xlab="Error Type",
col=c("darkgreen","darkblue"),
legend = rownames(allErrors),
beside=TRUE)
rm(list = ls())
